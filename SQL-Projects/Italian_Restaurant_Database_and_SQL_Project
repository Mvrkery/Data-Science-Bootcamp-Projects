.open restaurant.db
.mode table

-- Setting up Italian Restaurant Database

-- Tables: Categories
drop table categories;
CREATE TABLE IF NOT EXISTS categories (
  categories_id INT,
  categories_name TEXT
);

INSERT INTO categories VALUES
  (1, 'Appetizers'),
  (2, 'Pasta'),
  (3, 'Pizza'),
  (4, 'Main Courses'),
  (5, 'Desserts');

-- Tables: Menu
drop table menu;
CREATE TABLE IF NOT EXISTS menu (
  menu_id INT,
  categories_id INT,
  menu_name TEXT,
  menu_price int
);

INSERT INTO menu VALUES
  (1, 1, 'Bruschetta', 8),
  (2, 1, 'Caprese Salad', 9),
  (3, 2, 'Spaghetti Carbonara', 14),
  (4, 2, 'Fettuccine Alfredo', 13),
  (5, 3, 'Margherita Pizza', 12),
  (6, 3, 'Pepperoni Pizza', 14),
  (7, 4, 'Chicken Parmesan', 16),
  (8, 4, 'Osso Buco', 19),
  (9, 5, 'Tiramisu', 7),
  (10, 5, 'Cannoli', 6);

-- Tables: Customers
drop table customers;
CREATE TABLE IF NOT EXISTS customers (
  customers_id INT,
  customers_name TEXT,
  customers_type TEXT
);

INSERT INTO customers VALUES
  (1, 'Marco Rossi', 'Regular'),
  (2, 'Sophia Bianchi', 'VIP'),
  (3, 'Luca Verdi', 'Regular'),
  (4, 'Isabella Esposito', 'Regular'),
  (5, 'Lorenzo Russo', 'VIP'),
  (6, 'Mia Martini', 'Regular'),
  (7, 'Leonardo Romano', 'Regular'),
  (8, 'Sofia Conti', 'VIP'),
  (9, 'Matteo Ricci', 'Regular'),
  (10, 'Alessia Marchetti', 'Regular');

-- Tables: Services
drop table services;
CREATE TABLE IF NOT EXISTS services (
  service_id INT,
  service_type TEXT
);

INSERT INTO services VALUES
  (1, 'Dine-In'),
  (2, 'Takeout'),
  (3, 'Delivery'),
  (4, 'Catering');

-- Tables: Orders
drop table orders;
CREATE TABLE IF NOT EXISTS orders (
  order_id INT,
  order_date TEXT,
  menu_id INT,
  customers_id INT,
  amount INT,
  service_id INT
);

INSERT INTO orders VALUES
   (1, '2023-08-01', 3, 7, 1, 1),
  (2, '2023-08-02', 5, 3, 3, 3),
  (3, '2023-08-03', 8, 5, 2, 2),
  (4, '2023-08-04', 2, 9, 1, 4),
  (5, '2023-08-05', 10, 4, 3, 1),
  (6, '2023-08-06', 6, 2, 2, 3),
  (7, '2023-08-07', 1, 6, 1, 2),
  (8, '2023-08-08', 9, 8, 2, 1),
  (9, '2023-08-09', 4, 1, 3, 3),
  (10, '2023-08-10', 7, 10, 1, 4),
  (11, '2023-08-11', 7, 5, 4, 2),
  (12, '2023-08-12', 4, 8, 1, 3),
  (13, '2023-08-13', 2, 3, 3, 1),
  (14, '2023-08-14', 9, 10, 2, 4),
  (15, '2023-08-15', 1, 7, 4, 3),
  (16, '2023-08-16', 3, 6, 1, 1),
  (17, '2023-08-17', 8, 2, 3, 2),
  (18, '2023-08-18', 10, 1, 2, 4),
  (19, '2023-08-19', 5, 9, 1, 2),
  (20, '2023-08-20', 6, 5, 4, 3),
  (21, '2023-08-21', 2, 10, 1, 1),
  (22, '2023-08-22', 8, 4, 3, 2),
  (23, '2023-08-23', 7, 8, 2, 4),
  (24, '2023-08-24', 1, 3, 4, 3),
  (25, '2023-08-25', 4, 6, 1, 1),
  (26, '2023-08-26', 6, 2, 3, 2),
  (27, '2023-08-27', 5, 9, 2, 4),
  (28, '2023-08-28', 3, 7, 1, 3),
  (29, '2023-08-29', 9, 10, 4, 2),
  (30, '2023-08-30', 10, 8, 2, 1);


.print 'Tables: Categories'
select * from categories;
.print 'Tables: Menu'
select * from menu;
.print 'Tables: Customers'
select * from customers;
.print 'Tables: Services'
select * from services;
.print 'Tables: Orders'
select * from orders;

.print 'The Average Order Amount For Each Service Type'
SELECT
  service_type,
  AVG(amount) AS avg_order_amount
FROM orders AS o
JOIN services AS s ON o.service_id = s.service_id
GROUP BY service_type
ORDER BY avg_order_amount DESC;


.print 'Total Amount Of Sales For Each Customer'
WITH CustomerSales AS (
  SELECT
    o.customers_id,
    c.customers_name,
    SUM(o.amount * m.menu_price) AS total_sales
  FROM orders AS o
  JOIN menu AS m ON o.menu_id = m.menu_id
  JOIN customers c ON o.customers_id = c.customers_id
  GROUP BY o.customers_id, c.customers_name
)
SELECT customers_name, total_sales
FROM CustomerSales
ORDER BY total_sales DESC;

.print ' The Most Popular Menu Items (Top 3) '
WITH PopularMenu AS (
  SELECT
    m.menu_name,
    COUNT(o.order_id) AS order_count
  FROM orders AS o
  JOIN menu AS m ON o.menu_id = m.menu_id
  GROUP BY m.menu_name
)
SELECT menu_name, order_count
FROM PopularMenu
ORDER BY order_count DESC
LIMIT 3;

.print 'The Revenue For Each Category And Service Type Combination '
SELECT
  c.categories_name,
  s.service_type,
  SUM(o.amount * m.menu_price) AS revenue
FROM orders AS o
JOIN menu AS m ON o.menu_id = m.menu_id
JOIN categories AS c ON m.categories_id = c.categories_id
JOIN services AS s ON o.service_id = s.service_id
GROUP BY c.categories_name, s.service_type
ORDER BY revenue DESC;

.print 'Identify VIP customers who have placed high-value orders'
WITH CustomerOrderSummary AS (
  SELECT
    o.customers_id,
    c.customers_name,
    SUM(o.amount * m.menu_price) AS total_order_value
  FROM orders AS o
  JOIN menu AS m ON o.menu_id = m.menu_id
  JOIN customers AS c ON o.customers_id = c.customers_id
  GROUP BY o.customers_id, c.customers_name
)
SELECT customers_name, total_order_value
FROM CustomerOrderSummary
WHERE total_order_value > 100
ORDER BY total_order_value DESC;




